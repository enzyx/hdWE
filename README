##################
#  Basic classes #
##################
type                	dev         	status
-------------------------------------------------
class: Bin          
class: Trajectory

#module/class: propagate	(fabian)

description:
propagates the configurations in the updated bin/trajectory class
using a MD program.
The MD program specific code should be modular and easily adaptable.

options: 
-MD_software
-mode	(serial, later: parallel cpu, cuda ...)
-debug  (if True, save all generated input lines and MD output )

input:
-which trajectories exist/shall be propagated
-the previous end configuration, stored in the history of the trajectory,
 from which to start the propatation.

output:
-only logging output, the MD output is produced externally.

stuff to discuss: None

#module: assign_bins	(fabian)

description:
checks whether the MD has run correctly and the output was produced.
calculates the RMSD (or any coordinate) of all previously propagated trajectories 
with respect to all existing bin_refcoords.
This is done using a respective analysis module of the MD software used for
trajectory propagation. Should again be easily adaptable.
check wheter the  MD analysis tool ouput was produced.
Every trajectory will have a 'bin_values' array where the RMSDs are stored.
resorts all trajectories in the new corresponding bins, whether
there are to many or less trajectories in one bin or not.
saves 'where they come from'. as the history is saved, it does not matter 
in which order they are resorted into the bins.

options:
-MD_software
-mode    (serial, later; parallel)
-debug

input:
-bin_refcoords
-trajectory end coords

output:
-trajectories assigned to bins
-trajectory attribute with RMSD to all bin_refcoords


stuff to discuss: 
what happens if within the loop over the bins a new bin is created?

#module: split_and_merge

description:
applies the split and merge rules to the trajectories for all bins.
trajectories should have a property in the history that tells if 
they splitted or merged.

options:
-debug

stuff to discuss: None

#module: reweight (future)

description:
reweight the bin probabilities based on the bin-to-bin rates by
using the equilibrium condition (flux_bin_ij = - flux_bin_ji for all i and j).
This can drastically speed up convergene at the beginning.
Probability is shifted over free energy barriers and does not have
to flow there in 'real time'.



#module: update_and_log

description:
shifts the information to become history, logs everything.
the log should enable the restart of the script for the next iteration from here.
With the log file(s) all the post-analysis should be possible.

options:
-debug

stuff to discuss: 
How is the trajectory class logged?
I would suggest a file that contains everything for one iteration
and is saved every iteration.
How does the file format look?

#main: argparser     (manuel)    done
obvious


###################
# Analysis Tools  #
###################


-calculate Free Energy Landscape (for any coordinate), this is bin independent.
-calculate bin to bin rate Matrix (to get first order state to state rates, right now i dont
-remember why this does not generally give the correct rates), this is bin dependent.
-trace trajectories between defined states (with labelling) to get the rates. This is in principle bin independent.
-put together all completed trajectories between to states to get the pathways and nice 
state to state trajectories for visualisation.






##################
# Conventions    #
##################

#trajectory and MD data in subfolder '/workdir/propagation/'
filename conventions for AMBER propagation:
XXXXX_XXXXX_XXXXX.rst7 (ITERATION_BIN_SEGMENT)
...

The saved coordinates correspond to the end configuration of the propagation in one iteration.
The starting coordinates of this propagation are saved as the end configuration of a previous propagation.
They are conneced via a 'history' attribute of the actual trajectory.



#bin reference coordinates in '/workdir/bin_refcoords/'
XXXXX.rst7

#log databank per iteration in '/workdir/history/'
XXXXX.log ?

#any debugging output in '/workdir/debug/'





##################
#    Git Howto   #
##################

git clone ssh://fabi@rex/home/software/hdWE 

git status
git add trajectory.py

git commit -a
git log

git push
git pull

